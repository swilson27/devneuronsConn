# %%
import pandas as pd
from pathlib import Path
import pymaid
import json
import sys
import os

HERE = Path(__file__).resolve().parent
OUT_DIR = HERE / "output"

creds_path = os.environ.get("PYMAID_CREDENTIALS_PATH", HERE / "seymour.json")
with open(creds_path) as f:
    creds = json.load(f)
rm = pymaid.CatmaidInstance(**creds)

output = pd.read_csv(HERE / 'merged_targets_cosine_output.tsv', sep='\t')
output = output.sort_values('cosine_similarity_merged_targets')

# %%
vals = pymaid.get_names(list(output['left_skid']))
output["left_name"] = pd.Series(vals.values())

output.to_csv(OUT_DIR / "connA_outputs.csv", index=False)

sys.exit()
# %%
with open('sim_cosine_input.json') as json_file:
    input = json.load(json_file)
with open('sim_cosine_output.json') as json_file:
    output = json.load(json_file)

# %%
input_vals = {key:val for key, val in input.items() if val != None}
sorted_IV=[] #IV means input values
# w is cosine metric
for w in sorted(input_vals, key=input_vals.get, reverse = False):
                sorted_IV.append([w, input[w]])

output_vals = {key:val for key, val in output.items() if val != None}
sorted_OV=[] #OV means outputs
for w in sorted(output_vals, key=output_vals.get, reverse = False):
                sorted_OV.append([w, output[w]])


# %%
with open("sorted_conn_inputs.json", 'w') as outfile:
    json.dump(sorted_IV, outfile)

with open("sorted_conn_outputs.json", 'w') as outfile:
    json.dump(sorted_OV, outfile)

# %%
